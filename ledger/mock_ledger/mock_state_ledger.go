// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_ledger is a generated GoMock package.
package mock_ledger

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/meshplus/bitxhub-kit/types"
	pb "github.com/meshplus/bitxhub-model/pb"
	ledger "github.com/meshplus/eth-kit/ledger"
)

// MockStateLedger is a mock of StateLedger interface.
type MockStateLedger struct {
	ctrl     *gomock.Controller
	recorder *MockStateLedgerMockRecorder
}

// MockStateLedgerMockRecorder is the mock recorder for MockStateLedger.
type MockStateLedgerMockRecorder struct {
	mock *MockStateLedger
}

// NewMockStateLedger creates a new mock instance.
func NewMockStateLedger(ctrl *gomock.Controller) *MockStateLedger {
	mock := &MockStateLedger{ctrl: ctrl}
	mock.recorder = &MockStateLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateLedger) EXPECT() *MockStateLedgerMockRecorder {
	return m.recorder
}

// AddAddressToEVMAccessList mocks base method.
func (m *MockStateLedger) AddAddressToEVMAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToEVMAccessList", addr)
}

// AddAddressToEVMAccessList indicates an expected call of AddAddressToEVMAccessList.
func (mr *MockStateLedgerMockRecorder) AddAddressToEVMAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToEVMAccessList", reflect.TypeOf((*MockStateLedger)(nil).AddAddressToEVMAccessList), addr)
}

// AddEVMBalance mocks base method.
func (m *MockStateLedger) AddEVMBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMBalance", arg0, arg1)
}

// AddEVMBalance indicates an expected call of AddEVMBalance.
func (mr *MockStateLedgerMockRecorder) AddEVMBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMBalance", reflect.TypeOf((*MockStateLedger)(nil).AddEVMBalance), arg0, arg1)
}

// AddEVMLog mocks base method.
func (m *MockStateLedger) AddEVMLog(log *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMLog", log)
}

// AddEVMLog indicates an expected call of AddEVMLog.
func (mr *MockStateLedgerMockRecorder) AddEVMLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMLog", reflect.TypeOf((*MockStateLedger)(nil).AddEVMLog), log)
}

// AddEVMPreimage mocks base method.
func (m *MockStateLedger) AddEVMPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMPreimage", arg0, arg1)
}

// AddEVMPreimage indicates an expected call of AddEVMPreimage.
func (mr *MockStateLedgerMockRecorder) AddEVMPreimage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMPreimage", reflect.TypeOf((*MockStateLedger)(nil).AddEVMPreimage), arg0, arg1)
}

// AddEVMRefund mocks base method.
func (m *MockStateLedger) AddEVMRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMRefund", arg0)
}

// AddEVMRefund indicates an expected call of AddEVMRefund.
func (mr *MockStateLedgerMockRecorder) AddEVMRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMRefund", reflect.TypeOf((*MockStateLedger)(nil).AddEVMRefund), arg0)
}

// AddEvent mocks base method.
func (m *MockStateLedger) AddEvent(arg0 *pb.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", arg0)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockStateLedgerMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockStateLedger)(nil).AddEvent), arg0)
}

// AddLog mocks base method.
func (m *MockStateLedger) AddLog(log *pb.EvmLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", log)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockStateLedgerMockRecorder) AddLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockStateLedger)(nil).AddLog), log)
}

// AddSlotToEVMAccessList mocks base method.
func (m *MockStateLedger) AddSlotToEVMAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToEVMAccessList", addr, slot)
}

// AddSlotToEVMAccessList indicates an expected call of AddSlotToEVMAccessList.
func (mr *MockStateLedgerMockRecorder) AddSlotToEVMAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToEVMAccessList", reflect.TypeOf((*MockStateLedger)(nil).AddSlotToEVMAccessList), addr, slot)
}

// AddState mocks base method.
func (m *MockStateLedger) AddState(arg0 *types0.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddState", arg0, arg1, arg2)
}

// AddState indicates an expected call of AddState.
func (mr *MockStateLedgerMockRecorder) AddState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddState", reflect.TypeOf((*MockStateLedger)(nil).AddState), arg0, arg1, arg2)
}

// AddressInEVMAccessList mocks base method.
func (m *MockStateLedger) AddressInEVMAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInEVMAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInEVMAccessList indicates an expected call of AddressInEVMAccessList.
func (mr *MockStateLedgerMockRecorder) AddressInEVMAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInEVMAccessList", reflect.TypeOf((*MockStateLedger)(nil).AddressInEVMAccessList), addr)
}

// Clear mocks base method.
func (m *MockStateLedger) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockStateLedgerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockStateLedger)(nil).Clear))
}

// ClearChangerAndRefund mocks base method.
func (m *MockStateLedger) ClearChangerAndRefund() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearChangerAndRefund")
}

// ClearChangerAndRefund indicates an expected call of ClearChangerAndRefund.
func (mr *MockStateLedgerMockRecorder) ClearChangerAndRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearChangerAndRefund", reflect.TypeOf((*MockStateLedger)(nil).ClearChangerAndRefund))
}

// Close mocks base method.
func (m *MockStateLedger) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStateLedgerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateLedger)(nil).Close))
}

// Commit mocks base method.
func (m *MockStateLedger) Commit(height uint64, accounts map[string]ledger.IAccount, stateRoot *types0.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height, accounts, stateRoot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStateLedgerMockRecorder) Commit(height, accounts, stateRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStateLedger)(nil).Commit), height, accounts, stateRoot)
}

// Copy mocks base method.
func (m *MockStateLedger) Copy() ledger.StateLedger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(ledger.StateLedger)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockStateLedgerMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockStateLedger)(nil).Copy))
}

// CreateEVMAccount mocks base method.
func (m *MockStateLedger) CreateEVMAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEVMAccount", arg0)
}

// CreateEVMAccount indicates an expected call of CreateEVMAccount.
func (mr *MockStateLedgerMockRecorder) CreateEVMAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEVMAccount", reflect.TypeOf((*MockStateLedger)(nil).CreateEVMAccount), arg0)
}

// EmptyEVM mocks base method.
func (m *MockStateLedger) EmptyEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmptyEVM indicates an expected call of EmptyEVM.
func (mr *MockStateLedgerMockRecorder) EmptyEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyEVM", reflect.TypeOf((*MockStateLedger)(nil).EmptyEVM), arg0)
}

// Events mocks base method.
func (m *MockStateLedger) Events(txHash string) []*pb.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", txHash)
	ret0, _ := ret[0].([]*pb.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockStateLedgerMockRecorder) Events(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockStateLedger)(nil).Events), txHash)
}

// ExistEVM mocks base method.
func (m *MockStateLedger) ExistEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistEVM indicates an expected call of ExistEVM.
func (mr *MockStateLedgerMockRecorder) ExistEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistEVM", reflect.TypeOf((*MockStateLedger)(nil).ExistEVM), arg0)
}

// Finalise mocks base method.
func (m *MockStateLedger) Finalise(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise", arg0)
}

// Finalise indicates an expected call of Finalise.
func (mr *MockStateLedgerMockRecorder) Finalise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockStateLedger)(nil).Finalise), arg0)
}

// FlushDirtyData mocks base method.
func (m *MockStateLedger) FlushDirtyData() (map[string]ledger.IAccount, *types0.Hash) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDirtyData")
	ret0, _ := ret[0].(map[string]ledger.IAccount)
	ret1, _ := ret[1].(*types0.Hash)
	return ret0, ret1
}

// FlushDirtyData indicates an expected call of FlushDirtyData.
func (mr *MockStateLedgerMockRecorder) FlushDirtyData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDirtyData", reflect.TypeOf((*MockStateLedger)(nil).FlushDirtyData))
}

// GetAccount mocks base method.
func (m *MockStateLedger) GetAccount(arg0 *types0.Address) ledger.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(ledger.IAccount)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateLedgerMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateLedger)(nil).GetAccount), arg0)
}

// GetBalance mocks base method.
func (m *MockStateLedger) GetBalance(arg0 *types0.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateLedgerMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateLedger)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateLedger) GetCode(arg0 *types0.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateLedgerMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateLedger)(nil).GetCode), arg0)
}

// GetEVMBalance mocks base method.
func (m *MockStateLedger) GetEVMBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetEVMBalance indicates an expected call of GetEVMBalance.
func (mr *MockStateLedgerMockRecorder) GetEVMBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMBalance", reflect.TypeOf((*MockStateLedger)(nil).GetEVMBalance), arg0)
}

// GetEVMCode mocks base method.
func (m *MockStateLedger) GetEVMCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetEVMCode indicates an expected call of GetEVMCode.
func (mr *MockStateLedgerMockRecorder) GetEVMCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCode", reflect.TypeOf((*MockStateLedger)(nil).GetEVMCode), arg0)
}

// GetEVMCodeHash mocks base method.
func (m *MockStateLedger) GetEVMCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMCodeHash indicates an expected call of GetEVMCodeHash.
func (mr *MockStateLedgerMockRecorder) GetEVMCodeHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCodeHash", reflect.TypeOf((*MockStateLedger)(nil).GetEVMCodeHash), arg0)
}

// GetEVMCodeSize mocks base method.
func (m *MockStateLedger) GetEVMCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetEVMCodeSize indicates an expected call of GetEVMCodeSize.
func (mr *MockStateLedgerMockRecorder) GetEVMCodeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCodeSize", reflect.TypeOf((*MockStateLedger)(nil).GetEVMCodeSize), arg0)
}

// GetEVMCommittedState mocks base method.
func (m *MockStateLedger) GetEVMCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMCommittedState indicates an expected call of GetEVMCommittedState.
func (mr *MockStateLedgerMockRecorder) GetEVMCommittedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCommittedState", reflect.TypeOf((*MockStateLedger)(nil).GetEVMCommittedState), arg0, arg1)
}

// GetEVMNonce mocks base method.
func (m *MockStateLedger) GetEVMNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEVMNonce indicates an expected call of GetEVMNonce.
func (mr *MockStateLedgerMockRecorder) GetEVMNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMNonce", reflect.TypeOf((*MockStateLedger)(nil).GetEVMNonce), arg0)
}

// GetEVMRefund mocks base method.
func (m *MockStateLedger) GetEVMRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEVMRefund indicates an expected call of GetEVMRefund.
func (mr *MockStateLedgerMockRecorder) GetEVMRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMRefund", reflect.TypeOf((*MockStateLedger)(nil).GetEVMRefund))
}

// GetEVMState mocks base method.
func (m *MockStateLedger) GetEVMState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMState indicates an expected call of GetEVMState.
func (mr *MockStateLedgerMockRecorder) GetEVMState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMState", reflect.TypeOf((*MockStateLedger)(nil).GetEVMState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockStateLedger) GetLogs(arg0 types0.Hash) []*pb.EvmLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0)
	ret0, _ := ret[0].([]*pb.EvmLog)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockStateLedgerMockRecorder) GetLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockStateLedger)(nil).GetLogs), arg0)
}

// GetNonce mocks base method.
func (m *MockStateLedger) GetNonce(arg0 *types0.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateLedgerMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateLedger)(nil).GetNonce), arg0)
}

// GetOrCreateAccount mocks base method.
func (m *MockStateLedger) GetOrCreateAccount(arg0 *types0.Address) ledger.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(ledger.IAccount)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount.
func (mr *MockStateLedgerMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockStateLedger)(nil).GetOrCreateAccount), arg0)
}

// GetState mocks base method.
func (m *MockStateLedger) GetState(arg0 *types0.Address, arg1 []byte) (bool, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateLedgerMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateLedger)(nil).GetState), arg0, arg1)
}

// HasSuisideEVM mocks base method.
func (m *MockStateLedger) HasSuisideEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuisideEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuisideEVM indicates an expected call of HasSuisideEVM.
func (mr *MockStateLedgerMockRecorder) HasSuisideEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuisideEVM", reflect.TypeOf((*MockStateLedger)(nil).HasSuisideEVM), arg0)
}

// PrepareBlock mocks base method.
func (m *MockStateLedger) PrepareBlock(arg0 *types0.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareBlock", arg0, arg1)
}

// PrepareBlock indicates an expected call of PrepareBlock.
func (mr *MockStateLedgerMockRecorder) PrepareBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareBlock", reflect.TypeOf((*MockStateLedger)(nil).PrepareBlock), arg0, arg1)
}

// PrepareEVM mocks base method.
func (m *MockStateLedger) PrepareEVM(arg0 common.Hash, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareEVM", arg0, arg1)
}

// PrepareEVM indicates an expected call of PrepareEVM.
func (mr *MockStateLedgerMockRecorder) PrepareEVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareEVM", reflect.TypeOf((*MockStateLedger)(nil).PrepareEVM), arg0, arg1)
}

// PrepareEVMAccessList mocks base method.
func (m *MockStateLedger) PrepareEVMAccessList(sender common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareEVMAccessList", sender, dest, precompiles, txAccesses)
}

// PrepareEVMAccessList indicates an expected call of PrepareEVMAccessList.
func (mr *MockStateLedgerMockRecorder) PrepareEVMAccessList(sender, dest, precompiles, txAccesses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareEVMAccessList", reflect.TypeOf((*MockStateLedger)(nil).PrepareEVMAccessList), sender, dest, precompiles, txAccesses)
}

// QueryByPrefix mocks base method.
func (m *MockStateLedger) QueryByPrefix(address *types0.Address, prefix string) (bool, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByPrefix", address, prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// QueryByPrefix indicates an expected call of QueryByPrefix.
func (mr *MockStateLedgerMockRecorder) QueryByPrefix(address, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByPrefix", reflect.TypeOf((*MockStateLedger)(nil).QueryByPrefix), address, prefix)
}

// RevertToSnapshot mocks base method.
func (m *MockStateLedger) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateLedgerMockRecorder) RevertToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateLedger)(nil).RevertToSnapshot), arg0)
}

// RollbackState mocks base method.
func (m *MockStateLedger) RollbackState(height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackState", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackState indicates an expected call of RollbackState.
func (mr *MockStateLedgerMockRecorder) RollbackState(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackState", reflect.TypeOf((*MockStateLedger)(nil).RollbackState), height)
}

// SetBalance mocks base method.
func (m *MockStateLedger) SetBalance(arg0 *types0.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockStateLedgerMockRecorder) SetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockStateLedger)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockStateLedger) SetCode(arg0 *types0.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateLedgerMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateLedger)(nil).SetCode), arg0, arg1)
}

// SetEVMCode mocks base method.
func (m *MockStateLedger) SetEVMCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMCode", arg0, arg1)
}

// SetEVMCode indicates an expected call of SetEVMCode.
func (mr *MockStateLedgerMockRecorder) SetEVMCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMCode", reflect.TypeOf((*MockStateLedger)(nil).SetEVMCode), arg0, arg1)
}

// SetEVMNonce mocks base method.
func (m *MockStateLedger) SetEVMNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMNonce", arg0, arg1)
}

// SetEVMNonce indicates an expected call of SetEVMNonce.
func (mr *MockStateLedgerMockRecorder) SetEVMNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMNonce", reflect.TypeOf((*MockStateLedger)(nil).SetEVMNonce), arg0, arg1)
}

// SetEVMState mocks base method.
func (m *MockStateLedger) SetEVMState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMState", arg0, arg1, arg2)
}

// SetEVMState indicates an expected call of SetEVMState.
func (mr *MockStateLedgerMockRecorder) SetEVMState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMState", reflect.TypeOf((*MockStateLedger)(nil).SetEVMState), arg0, arg1, arg2)
}

// SetNonce mocks base method.
func (m *MockStateLedger) SetNonce(arg0 *types0.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateLedgerMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateLedger)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateLedger) SetState(arg0 *types0.Address, arg1, arg2 []byte, arg3 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2, arg3)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateLedgerMockRecorder) SetState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateLedger)(nil).SetState), arg0, arg1, arg2, arg3)
}

// SlotInEVMAceessList mocks base method.
func (m *MockStateLedger) SlotInEVMAceessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInEVMAceessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInEVMAceessList indicates an expected call of SlotInEVMAceessList.
func (mr *MockStateLedgerMockRecorder) SlotInEVMAceessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInEVMAceessList", reflect.TypeOf((*MockStateLedger)(nil).SlotInEVMAceessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockStateLedger) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateLedgerMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateLedger)(nil).Snapshot))
}

// SubEVMBalance mocks base method.
func (m *MockStateLedger) SubEVMBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubEVMBalance", arg0, arg1)
}

// SubEVMBalance indicates an expected call of SubEVMBalance.
func (mr *MockStateLedgerMockRecorder) SubEVMBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubEVMBalance", reflect.TypeOf((*MockStateLedger)(nil).SubEVMBalance), arg0, arg1)
}

// SubEVMRefund mocks base method.
func (m *MockStateLedger) SubEVMRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubEVMRefund", arg0)
}

// SubEVMRefund indicates an expected call of SubEVMRefund.
func (mr *MockStateLedgerMockRecorder) SubEVMRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubEVMRefund", reflect.TypeOf((*MockStateLedger)(nil).SubEVMRefund), arg0)
}

// SuisideEVM mocks base method.
func (m *MockStateLedger) SuisideEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuisideEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SuisideEVM indicates an expected call of SuisideEVM.
func (mr *MockStateLedgerMockRecorder) SuisideEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuisideEVM", reflect.TypeOf((*MockStateLedger)(nil).SuisideEVM), arg0)
}

// Version mocks base method.
func (m *MockStateLedger) Version() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockStateLedgerMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockStateLedger)(nil).Version))
}

// MockStateAccessor is a mock of StateAccessor interface.
type MockStateAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockStateAccessorMockRecorder
}

// MockStateAccessorMockRecorder is the mock recorder for MockStateAccessor.
type MockStateAccessorMockRecorder struct {
	mock *MockStateAccessor
}

// NewMockStateAccessor creates a new mock instance.
func NewMockStateAccessor(ctrl *gomock.Controller) *MockStateAccessor {
	mock := &MockStateAccessor{ctrl: ctrl}
	mock.recorder = &MockStateAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateAccessor) EXPECT() *MockStateAccessorMockRecorder {
	return m.recorder
}

// AddState mocks base method.
func (m *MockStateAccessor) AddState(arg0 *types0.Address, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddState", arg0, arg1, arg2)
}

// AddState indicates an expected call of AddState.
func (mr *MockStateAccessorMockRecorder) AddState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddState", reflect.TypeOf((*MockStateAccessor)(nil).AddState), arg0, arg1, arg2)
}

// Clear mocks base method.
func (m *MockStateAccessor) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockStateAccessorMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockStateAccessor)(nil).Clear))
}

// Commit mocks base method.
func (m *MockStateAccessor) Commit(height uint64, accounts map[string]ledger.IAccount, stateRoot *types0.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", height, accounts, stateRoot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStateAccessorMockRecorder) Commit(height, accounts, stateRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStateAccessor)(nil).Commit), height, accounts, stateRoot)
}

// FlushDirtyData mocks base method.
func (m *MockStateAccessor) FlushDirtyData() (map[string]ledger.IAccount, *types0.Hash) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDirtyData")
	ret0, _ := ret[0].(map[string]ledger.IAccount)
	ret1, _ := ret[1].(*types0.Hash)
	return ret0, ret1
}

// FlushDirtyData indicates an expected call of FlushDirtyData.
func (mr *MockStateAccessorMockRecorder) FlushDirtyData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDirtyData", reflect.TypeOf((*MockStateAccessor)(nil).FlushDirtyData))
}

// GetAccount mocks base method.
func (m *MockStateAccessor) GetAccount(arg0 *types0.Address) ledger.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(ledger.IAccount)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateAccessorMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateAccessor)(nil).GetAccount), arg0)
}

// GetBalance mocks base method.
func (m *MockStateAccessor) GetBalance(arg0 *types0.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateAccessorMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateAccessor)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateAccessor) GetCode(arg0 *types0.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateAccessorMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateAccessor)(nil).GetCode), arg0)
}

// GetNonce mocks base method.
func (m *MockStateAccessor) GetNonce(arg0 *types0.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateAccessorMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateAccessor)(nil).GetNonce), arg0)
}

// GetOrCreateAccount mocks base method.
func (m *MockStateAccessor) GetOrCreateAccount(arg0 *types0.Address) ledger.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(ledger.IAccount)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount.
func (mr *MockStateAccessorMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockStateAccessor)(nil).GetOrCreateAccount), arg0)
}

// GetState mocks base method.
func (m *MockStateAccessor) GetState(arg0 *types0.Address, arg1 []byte) (bool, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateAccessorMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateAccessor)(nil).GetState), arg0, arg1)
}

// QueryByPrefix mocks base method.
func (m *MockStateAccessor) QueryByPrefix(address *types0.Address, prefix string) (bool, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByPrefix", address, prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// QueryByPrefix indicates an expected call of QueryByPrefix.
func (mr *MockStateAccessorMockRecorder) QueryByPrefix(address, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByPrefix", reflect.TypeOf((*MockStateAccessor)(nil).QueryByPrefix), address, prefix)
}

// SetBalance mocks base method.
func (m *MockStateAccessor) SetBalance(arg0 *types0.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockStateAccessorMockRecorder) SetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockStateAccessor)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockStateAccessor) SetCode(arg0 *types0.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateAccessorMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateAccessor)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockStateAccessor) SetNonce(arg0 *types0.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateAccessorMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateAccessor)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateAccessor) SetState(arg0 *types0.Address, arg1, arg2 []byte, arg3 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2, arg3)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateAccessorMockRecorder) SetState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateAccessor)(nil).SetState), arg0, arg1, arg2, arg3)
}

// MockIAccount is a mock of IAccount interface.
type MockIAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountMockRecorder
}

// MockIAccountMockRecorder is the mock recorder for MockIAccount.
type MockIAccountMockRecorder struct {
	mock *MockIAccount
}

// NewMockIAccount creates a new mock instance.
func NewMockIAccount(ctrl *gomock.Controller) *MockIAccount {
	mock := &MockIAccount{ctrl: ctrl}
	mock.recorder = &MockIAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccount) EXPECT() *MockIAccountMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockIAccount) AddBalance(amount *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", amount)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockIAccountMockRecorder) AddBalance(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockIAccount)(nil).AddBalance), amount)
}

// AddState mocks base method.
func (m *MockIAccount) AddState(key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddState", key, value)
}

// AddState indicates an expected call of AddState.
func (mr *MockIAccountMockRecorder) AddState(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddState", reflect.TypeOf((*MockIAccount)(nil).AddState), key, value)
}

// Code mocks base method.
func (m *MockIAccount) Code() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockIAccountMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockIAccount)(nil).Code))
}

// CodeHash mocks base method.
func (m *MockIAccount) CodeHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CodeHash indicates an expected call of CodeHash.
func (mr *MockIAccountMockRecorder) CodeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeHash", reflect.TypeOf((*MockIAccount)(nil).CodeHash))
}

// GetAddress mocks base method.
func (m *MockIAccount) GetAddress() *types0.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(*types0.Address)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIAccountMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIAccount)(nil).GetAddress))
}

// GetBalance mocks base method.
func (m *MockIAccount) GetBalance() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIAccountMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIAccount)(nil).GetBalance))
}

// GetCommittedState mocks base method.
func (m *MockIAccount) GetCommittedState(key []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockIAccountMockRecorder) GetCommittedState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockIAccount)(nil).GetCommittedState), key)
}

// GetNonce mocks base method.
func (m *MockIAccount) GetNonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockIAccountMockRecorder) GetNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockIAccount)(nil).GetNonce))
}

// GetState mocks base method.
func (m *MockIAccount) GetState(key []byte) (bool, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockIAccountMockRecorder) GetState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockIAccount)(nil).GetState), key)
}

// IsEmpty mocks base method.
func (m *MockIAccount) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockIAccountMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockIAccount)(nil).IsEmpty))
}

// Query mocks base method.
func (m *MockIAccount) Query(prefix string) (bool, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", prefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIAccountMockRecorder) Query(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIAccount)(nil).Query), prefix)
}

// SetBalance mocks base method.
func (m *MockIAccount) SetBalance(balance *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", balance)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockIAccountMockRecorder) SetBalance(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockIAccount)(nil).SetBalance), balance)
}

// SetCodeAndHash mocks base method.
func (m *MockIAccount) SetCodeAndHash(code []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCodeAndHash", code)
}

// SetCodeAndHash indicates an expected call of SetCodeAndHash.
func (mr *MockIAccountMockRecorder) SetCodeAndHash(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCodeAndHash", reflect.TypeOf((*MockIAccount)(nil).SetCodeAndHash), code)
}

// SetNonce mocks base method.
func (m *MockIAccount) SetNonce(nonce uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", nonce)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockIAccountMockRecorder) SetNonce(nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockIAccount)(nil).SetNonce), nonce)
}

// SetState mocks base method.
func (m *MockIAccount) SetState(key, value []byte, changer interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", key, value, changer)
}

// SetState indicates an expected call of SetState.
func (mr *MockIAccountMockRecorder) SetState(key, value, changer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockIAccount)(nil).SetState), key, value, changer)
}

// SetSuicided mocks base method.
func (m *MockIAccount) SetSuicided(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSuicided", arg0)
}

// SetSuicided indicates an expected call of SetSuicided.
func (mr *MockIAccountMockRecorder) SetSuicided(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuicided", reflect.TypeOf((*MockIAccount)(nil).SetSuicided), arg0)
}

// SubBalance mocks base method.
func (m *MockIAccount) SubBalance(amount *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", amount)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockIAccountMockRecorder) SubBalance(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockIAccount)(nil).SubBalance), amount)
}

// Suicided mocks base method.
func (m *MockIAccount) Suicided() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicided")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicided indicates an expected call of Suicided.
func (mr *MockIAccountMockRecorder) Suicided() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicided", reflect.TypeOf((*MockIAccount)(nil).Suicided))
}

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// AddAddressToEVMAccessList mocks base method.
func (m *MockStateDB) AddAddressToEVMAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToEVMAccessList", addr)
}

// AddAddressToEVMAccessList indicates an expected call of AddAddressToEVMAccessList.
func (mr *MockStateDBMockRecorder) AddAddressToEVMAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToEVMAccessList", reflect.TypeOf((*MockStateDB)(nil).AddAddressToEVMAccessList), addr)
}

// AddEVMBalance mocks base method.
func (m *MockStateDB) AddEVMBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMBalance", arg0, arg1)
}

// AddEVMBalance indicates an expected call of AddEVMBalance.
func (mr *MockStateDBMockRecorder) AddEVMBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMBalance", reflect.TypeOf((*MockStateDB)(nil).AddEVMBalance), arg0, arg1)
}

// AddEVMLog mocks base method.
func (m *MockStateDB) AddEVMLog(log *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMLog", log)
}

// AddEVMLog indicates an expected call of AddEVMLog.
func (mr *MockStateDBMockRecorder) AddEVMLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMLog", reflect.TypeOf((*MockStateDB)(nil).AddEVMLog), log)
}

// AddEVMPreimage mocks base method.
func (m *MockStateDB) AddEVMPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMPreimage", arg0, arg1)
}

// AddEVMPreimage indicates an expected call of AddEVMPreimage.
func (mr *MockStateDBMockRecorder) AddEVMPreimage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMPreimage", reflect.TypeOf((*MockStateDB)(nil).AddEVMPreimage), arg0, arg1)
}

// AddEVMRefund mocks base method.
func (m *MockStateDB) AddEVMRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEVMRefund", arg0)
}

// AddEVMRefund indicates an expected call of AddEVMRefund.
func (mr *MockStateDBMockRecorder) AddEVMRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEVMRefund", reflect.TypeOf((*MockStateDB)(nil).AddEVMRefund), arg0)
}

// AddSlotToEVMAccessList mocks base method.
func (m *MockStateDB) AddSlotToEVMAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToEVMAccessList", addr, slot)
}

// AddSlotToEVMAccessList indicates an expected call of AddSlotToEVMAccessList.
func (mr *MockStateDBMockRecorder) AddSlotToEVMAccessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToEVMAccessList", reflect.TypeOf((*MockStateDB)(nil).AddSlotToEVMAccessList), addr, slot)
}

// AddressInEVMAccessList mocks base method.
func (m *MockStateDB) AddressInEVMAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInEVMAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInEVMAccessList indicates an expected call of AddressInEVMAccessList.
func (mr *MockStateDBMockRecorder) AddressInEVMAccessList(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInEVMAccessList", reflect.TypeOf((*MockStateDB)(nil).AddressInEVMAccessList), addr)
}

// CreateEVMAccount mocks base method.
func (m *MockStateDB) CreateEVMAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEVMAccount", arg0)
}

// CreateEVMAccount indicates an expected call of CreateEVMAccount.
func (mr *MockStateDBMockRecorder) CreateEVMAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEVMAccount", reflect.TypeOf((*MockStateDB)(nil).CreateEVMAccount), arg0)
}

// EmptyEVM mocks base method.
func (m *MockStateDB) EmptyEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmptyEVM indicates an expected call of EmptyEVM.
func (mr *MockStateDBMockRecorder) EmptyEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyEVM", reflect.TypeOf((*MockStateDB)(nil).EmptyEVM), arg0)
}

// ExistEVM mocks base method.
func (m *MockStateDB) ExistEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistEVM indicates an expected call of ExistEVM.
func (mr *MockStateDBMockRecorder) ExistEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistEVM", reflect.TypeOf((*MockStateDB)(nil).ExistEVM), arg0)
}

// GetEVMBalance mocks base method.
func (m *MockStateDB) GetEVMBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetEVMBalance indicates an expected call of GetEVMBalance.
func (mr *MockStateDBMockRecorder) GetEVMBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMBalance", reflect.TypeOf((*MockStateDB)(nil).GetEVMBalance), arg0)
}

// GetEVMCode mocks base method.
func (m *MockStateDB) GetEVMCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetEVMCode indicates an expected call of GetEVMCode.
func (mr *MockStateDBMockRecorder) GetEVMCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCode", reflect.TypeOf((*MockStateDB)(nil).GetEVMCode), arg0)
}

// GetEVMCodeHash mocks base method.
func (m *MockStateDB) GetEVMCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMCodeHash indicates an expected call of GetEVMCodeHash.
func (mr *MockStateDBMockRecorder) GetEVMCodeHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCodeHash", reflect.TypeOf((*MockStateDB)(nil).GetEVMCodeHash), arg0)
}

// GetEVMCodeSize mocks base method.
func (m *MockStateDB) GetEVMCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetEVMCodeSize indicates an expected call of GetEVMCodeSize.
func (mr *MockStateDBMockRecorder) GetEVMCodeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCodeSize", reflect.TypeOf((*MockStateDB)(nil).GetEVMCodeSize), arg0)
}

// GetEVMCommittedState mocks base method.
func (m *MockStateDB) GetEVMCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMCommittedState indicates an expected call of GetEVMCommittedState.
func (mr *MockStateDBMockRecorder) GetEVMCommittedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMCommittedState", reflect.TypeOf((*MockStateDB)(nil).GetEVMCommittedState), arg0, arg1)
}

// GetEVMNonce mocks base method.
func (m *MockStateDB) GetEVMNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEVMNonce indicates an expected call of GetEVMNonce.
func (mr *MockStateDBMockRecorder) GetEVMNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMNonce", reflect.TypeOf((*MockStateDB)(nil).GetEVMNonce), arg0)
}

// GetEVMRefund mocks base method.
func (m *MockStateDB) GetEVMRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEVMRefund indicates an expected call of GetEVMRefund.
func (mr *MockStateDBMockRecorder) GetEVMRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMRefund", reflect.TypeOf((*MockStateDB)(nil).GetEVMRefund))
}

// GetEVMState mocks base method.
func (m *MockStateDB) GetEVMState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEVMState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetEVMState indicates an expected call of GetEVMState.
func (mr *MockStateDBMockRecorder) GetEVMState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEVMState", reflect.TypeOf((*MockStateDB)(nil).GetEVMState), arg0, arg1)
}

// HasSuisideEVM mocks base method.
func (m *MockStateDB) HasSuisideEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuisideEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuisideEVM indicates an expected call of HasSuisideEVM.
func (mr *MockStateDBMockRecorder) HasSuisideEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuisideEVM", reflect.TypeOf((*MockStateDB)(nil).HasSuisideEVM), arg0)
}

// PrepareEVM mocks base method.
func (m *MockStateDB) PrepareEVM(arg0 common.Hash, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareEVM", arg0, arg1)
}

// PrepareEVM indicates an expected call of PrepareEVM.
func (mr *MockStateDBMockRecorder) PrepareEVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareEVM", reflect.TypeOf((*MockStateDB)(nil).PrepareEVM), arg0, arg1)
}

// PrepareEVMAccessList mocks base method.
func (m *MockStateDB) PrepareEVMAccessList(sender common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareEVMAccessList", sender, dest, precompiles, txAccesses)
}

// PrepareEVMAccessList indicates an expected call of PrepareEVMAccessList.
func (mr *MockStateDBMockRecorder) PrepareEVMAccessList(sender, dest, precompiles, txAccesses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareEVMAccessList", reflect.TypeOf((*MockStateDB)(nil).PrepareEVMAccessList), sender, dest, precompiles, txAccesses)
}

// RevertToSnapshot mocks base method.
func (m *MockStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateDBMockRecorder) RevertToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateDB)(nil).RevertToSnapshot), arg0)
}

// SetEVMCode mocks base method.
func (m *MockStateDB) SetEVMCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMCode", arg0, arg1)
}

// SetEVMCode indicates an expected call of SetEVMCode.
func (mr *MockStateDBMockRecorder) SetEVMCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMCode", reflect.TypeOf((*MockStateDB)(nil).SetEVMCode), arg0, arg1)
}

// SetEVMNonce mocks base method.
func (m *MockStateDB) SetEVMNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMNonce", arg0, arg1)
}

// SetEVMNonce indicates an expected call of SetEVMNonce.
func (mr *MockStateDBMockRecorder) SetEVMNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMNonce", reflect.TypeOf((*MockStateDB)(nil).SetEVMNonce), arg0, arg1)
}

// SetEVMState mocks base method.
func (m *MockStateDB) SetEVMState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEVMState", arg0, arg1, arg2)
}

// SetEVMState indicates an expected call of SetEVMState.
func (mr *MockStateDBMockRecorder) SetEVMState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEVMState", reflect.TypeOf((*MockStateDB)(nil).SetEVMState), arg0, arg1, arg2)
}

// SlotInEVMAceessList mocks base method.
func (m *MockStateDB) SlotInEVMAceessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInEVMAceessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInEVMAceessList indicates an expected call of SlotInEVMAceessList.
func (mr *MockStateDBMockRecorder) SlotInEVMAceessList(addr, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInEVMAceessList", reflect.TypeOf((*MockStateDB)(nil).SlotInEVMAceessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateDB)(nil).Snapshot))
}

// SubEVMBalance mocks base method.
func (m *MockStateDB) SubEVMBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubEVMBalance", arg0, arg1)
}

// SubEVMBalance indicates an expected call of SubEVMBalance.
func (mr *MockStateDBMockRecorder) SubEVMBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubEVMBalance", reflect.TypeOf((*MockStateDB)(nil).SubEVMBalance), arg0, arg1)
}

// SubEVMRefund mocks base method.
func (m *MockStateDB) SubEVMRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubEVMRefund", arg0)
}

// SubEVMRefund indicates an expected call of SubEVMRefund.
func (mr *MockStateDBMockRecorder) SubEVMRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubEVMRefund", reflect.TypeOf((*MockStateDB)(nil).SubEVMRefund), arg0)
}

// SuisideEVM mocks base method.
func (m *MockStateDB) SuisideEVM(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuisideEVM", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SuisideEVM indicates an expected call of SuisideEVM.
func (mr *MockStateDBMockRecorder) SuisideEVM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuisideEVM", reflect.TypeOf((*MockStateDB)(nil).SuisideEVM), arg0)
}
